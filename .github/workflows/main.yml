name: ProductService CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  AZURE_CONTAINER_REGISTRY: ocorneracr3
  APP_NAME: productservice
  RESOURCE_GROUP: Online-cornerRG
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Get ACR credentials
      run: |
        ACR_USERNAME=$(az acr credential show --name ${{ env.AZURE_CONTAINER_REGISTRY }} --query "username" -o tsv)
        ACR_PASSWORD=$(az acr credential show --name ${{ env.AZURE_CONTAINER_REGISTRY }} --query "passwords[0].value" -o tsv)
        echo "ACR_USERNAME=$ACR_USERNAME" >> $GITHUB_ENV
        echo "ACR_PASSWORD=$ACR_PASSWORD" >> $GITHUB_ENV

    - name: Login to ACR
      uses: docker/login-action@v2
      with:
        registry: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
        username: ${{ env.ACR_USERNAME }}
        password: ${{ env.ACR_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.APP_NAME }}:latest
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.APP_NAME }}:${{ env.IMAGE_TAG }}

    - name: Find AKS cluster
      run: |
        echo "Available AKS clusters:"
        az aks list -o table
        
        echo "Trying to find cluster in ${{ env.RESOURCE_GROUP }}..."
        AKS_NAME=$(az aks list --resource-group ${{ env.RESOURCE_GROUP }} --query "[0].name" -o tsv)
        
        if [ -z "$AKS_NAME" ]; then
          echo "::error::No AKS cluster found in resource group"
          exit 1
        fi
        echo "Using cluster: $AKS_NAME"
        echo "AKS_NAME=$AKS_NAME" >> $GITHUB_ENV

    - name: Deploy to AKS
      run: |
        az aks get-credentials --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.AKS_NAME }} --admin
        kubectl apply -f ./manifest